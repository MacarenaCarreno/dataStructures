// initialize the index to 0
function subsetSum (target, nums, idx = 0) {
  // if we've hit 0 we're done!
  if (target === 0) return true;
  // stop trying and return false if the target is negative OR 
  // if we've reached the end of the array
  if (target < 0 || idx === nums.length) return false;
  const num = nums[idx];
  // capture the boolean result for the possibility of *excluding* 
  // the current number from the sum
  // recursively try with the same target, but continue onto the next index
  const whenExcluded = subsetSum(target, nums, idx + 1);
  // capture the boolean result for the possibility of *including* 
  // the current number in the sum
  // recursively try with the target minus this number and continue onto the next index
  const whenIncluded = subsetSum(target - num, nums, idx + 1);
  // return whether either possibility came back true
  return whenExcluded || whenIncluded;
}



subsetSum(2, [83,95,13,8,6,33,62,43,33,53,90,13,97,8,6,40,72,11,83,33,54,4,40,6,90,85,56,44,56,67,84,65,10,43,92,33,93,39,36,60,23,94,28,37,42,92,20,57,36,70,50,98,52,63,41,39,70,83,19,45,40,56,34,31,13,9,94,86,13,60,12,38,59,53,81,73,41,98,76,49,69,7,95,49,21,11,1,63,13,56,91,56,78,19,96,58,43,74,79,62,66,31,23,33,43,6,3,60,38,45,91,36,73,49,74,61,42,86,72,2,7,99,45,84,7,81,98,60,7,39,23,43,27,45,88,19,17,67,15,54,66,90,93,12,72,58,50,34,77,1,29,49,70,96,98,8,21,89,92,50,70,15,90,43,69,12,14,43,64,100,26,33,14,18,48,16,55,5,15,34,39,27,46,94,47,92,38,48,50,20,10,29,57,41,35,31,20,89,72,67,21,87,23,14,77,39,53,29,82,55,68,78,30,9,25,92,73,20,50,22,43,3,26,79,4,54,55,77,43,38,10,85,90,90,46,30,41,47,49,2,54,43,58,32,4,90,47,54,35,44,44,47,4,49,56,78,68,93,67,64,14,4,9,93,15,63,7,93,20,49,89,29,1,49,76,34,1,97,92,35,64,31,8,36,88,63,56,8,56,80,48,1,20,38,85,78,54,34,36,1,40,38,24,55,100,85,99,50,91,21,97,19,52,94,8,71,86,54,23,50,78,63,92,4,48,89,10,11,59,97,47,76,94,93,13,82,89,98,69,98,67,12,62,73,94,69,73,13,9,85,87,87,95,39,78,94,61,76,100,83,96,97,7,51,26,67,9,98,31,30,3,77,6,16,41,99,59,38,81,68,41,41,58,14,71,62,24,33,87,2,86,86,69,7,71,24,94,76,76,39,4,24,26,5,12,73,24,56,80,47,75,18,12,86,56,4,84,5,17,80,48,78,69,39,84,62,61,60,27,35,3,65,25,23,47,70,46,42,77,15,100,95,3,20,8,82,7,87,50,96,73,68,40,72,73,92,81,79,34,7,53,20,20,25,9,1,60,63,59,79,67,58,63,13,32,60,99,23,61,26,51,16,68,31,10,19,79,2,100,67,56,57,8,13,55,32,96,35,65,68,14,13,94,29,2,29,51,15,52,60,20,13,70,77,56,98,80,60,12,20,62,36,1,67,90,33,86,52,83,37,59,82,43,11,77,93,71,40,97,59,80,27,5,91,94,84,16,66,5,6,41,29,32,18,89,93,8,67,53,69,76,41,61,42,72,95,79,82,69,79,42,86,26,31,33,93,49,81,50,7,6,82,66,16,36,26,87,79,14,93,92,64,63,70,37,15,94,87,61,2,74,75,1,64,92,9,99,1,14,91,21,81,91,93,24,86,85,34,11,9,90,62,65,65,10,55,2,55,38,50,50,48,67,98,78,36,89,53,34,2,65,50,8,94,68,50,15,45,79,61,74,3,67,96,82,31,90,71,15,95,11,19,91,57,86,34,60,61,59,33,41,62,57,1,96,95,66,45,95,17,93,74,86,18,10,62,86,41,87,96,13,19,76,99,74,12,2,79,55,68,34,77,46,8,21,57,61,47,22,53,73,12,6,32,8,60,46,22,97,61,35,92,56,60,68,12,69,69,35,77,49,30,28,83,80,84,1,19,60,27,39,76,18,96,32,49,83,78,17,52,19,46,3,12,60,97,12,96,14,10,18,19,64,34,77,88,21,42,39,68,64,76,16,93,86,77,28,49,43,12,40,100,95,57,25,60,14,1,50,46,56,17,35,82,6,87,91,1,90,56,27,45,20,94,56,41,16,91,12,96,19,73,14,7,68,58,27,74,61,28,51,30,9,36,39,44,100,65,68,22,57,46,35,96,50,37,81,75,31,74,86,84,21,82,74,45,87,38,53,53,42,59,39,10,47,10,5,47,84,47,100,21,31,16,61,60,70,37,75,40,22,55,27,29,34,69,39,28,98,38,51,74,11,81,73,22,19,97,19,42,57,74,19,98,85,47,15,9,97,78,62,80,82,56,37,34,58,61,67,7,80,47,42,1,75,15,55,72,85,14,23,72,79,63,29,19,44,2,95,95,32,68,51,27,53,60,52,83,71,70,69,16,17,71,58,37,11,74,75,23,12,45,24,38,9,77,4,45,61,86,83,76,72,31,88,40,72,73,50,76,5,66,26,72,49,1,85,53,77,93,33,70,23,31,87,43,70,3,16,75,47,18,73,68,43,45,63,41,16,2]);


